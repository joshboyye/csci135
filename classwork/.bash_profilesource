In her 2011 pop anthem, Lady Gaga expresses her support for LGBTQ communities on the grounds that queer people are "Born this Way." Is she right that people are "born" into a sexual orientation? Use Jonathan Katz's "The Invention of Heterosexuality" to make your case.


4 Task A Implement constructors and destructor. 4.1 Define default constructor 1. Set data member numPairs to be 3. 2. Set data member numSlots to be 8. 3. Allocate dynamic memory for an array of strings with numSlots elements and assign it to member values. Generate three random integers in [0, 999], place the first integer to the first two slots of values, the second integer to the next two slots of values, and the third integer to the subsequent two slots of values. Set the rest elements of values to be empty strings. data data 4. Allocate dynamic memory for an array of booleans– type bool in C++– with numSlots elements and assign it to member bShown. Set each element of bShown to be false. 4.2 Non-default constructor MemoryGame(int numPairs, int numSlots) 1. If at least one of formal parameters numPairs and numSlots is non-positive or numSlots is smaller than twice of numPairs, then set data mem bers numPairs to be 3 and data Otherwise, set formal parameter numSlots. data mem bers numSlots to be 8. member numPairs by formal parameter numPairs, and data member numSlots by 2. Allocate dynamic memory for an array of strings with numSlots elements and assign it to member values. Generate numPairs random integers in [0, 999], place the first integer to the first two slots of values, the second integer to the next two slots of values, ···, until all integers are placed in pairs in values. Set the rest elements of values to be empty strings. data data 3. Allocate dynamic memory for an array of booleans– type bool in C++– with numSlots elements and assign it to member bShown. Set each element of bShown to be false. 4.3 Non-default constructor MemoryGame(string* words, int size, int numSlots) • Assume the number of elements in formal parameter words is size. If formal parameters size or numSlots is non-positive or numSlots is smaller than twice of size, set numSlots to be twice of size. • After the above possible adjustment, set data member numPairs to be formal parameter size, and set member numSlots to be formal parameter numSlots. • Allocate dynamic memory for an array of strings with numSlots elements and assign it to data member values. Place the first word to the first two slots of values, the second word to the next two slots of values, ···, until all words are placed in pairs in values. Set the rest elements of values to be empty strings. data 3data • Allocate dynamic memory for an array of booleans– type bool in C++– with numSlots elements and assign it to member bShown. Set each element of bShown to be false. 4.4 Define destructor Release dynamically allocated memory allocated to data member values. Set values to be nullptr to avoid dangling pointer problem. Do similar things to data member bShown. 4.5 What you need to do Define MemoryGame.cpp. Note that there are some differences in defining methods, aka member functions, in a class and a function that is not associated with a class. • If the header file and source codes are separated as in our case, need to add className followed by :: before a method of class. For example, define default constructor MemoryGame in MemoryGame.cpp, we use the following code snippet. 1 2 Memo ryGame::MemoryGame() { //TODO: Your code goes here. 3 } • A constructor of a class is the creator of an object in that class. It must have exactly the same name as a class, case to case, letter to letter. However, a constructor has no return type, not even void. We can have multiple versions of constructors, as long as their signatures, i.e., parameter lists, are different. These distinctions can be in terms of the number of parameters, the types of parameters, or the order of parameters. • We can imagine a class as a branch concentrating on manufacturing a product, with data members akin to items placed within the lounge of that branch. Constructors and methods within a class can directly access and modify these data members. However, functions outside the class can only access or modify the data members through the public methods provided by that class. As a result, no need to pass data members as parameters or return their values in constructors or methods of the same class. 1 #include "MemoryGame.hpp" 2 3 MemoryGame::MemoryGame() { 4 5 } //TODO: place your code here 6 7 MemoryGame::MemoryGame(int numPairs, int numSlots) { 8 9 } //TODO: place your code here 10 11 MemoryGame::MemoryGame(string* words, int size, int numSlots) { 12 13 } //TODO: place your code here 14 15 MemoryGame::~MemoryGame() { 416 //TODO:placeyourcodehere 17 } 18 19 voidMemoryGame::randomize(){ 20 //TODO:placeholder,donotneedtoimplementinTaskA 21 } 22 23 voidMemoryGame::display() const { 24 //TODO:placeholder,donotneedtoimplementinTaskA 25 } Warning: removeall instancesofsrand(time(NULL));statementbeforesubmittingtogradescope. 4.6 Reducecoderedundancy Youmayfindouttherearealotofredundantcodesintheseconstrctors.OnewayistodefineMemoryGame(int numPairs, intnumSlots), thenuseconstructordelegatortosimplythedefinitionofothertwoconstructors. For example,defaultconstructorcanbedefinedasfollowswiththehelpofnon-defaultconstructorMemoryGame(int, int). 1 MemoryGame::MemoryGame():MemoryGame(3,8){ 2 } Warning: touseconstructordelegate,weneedC++11. Sowhenrunningg++command, add-std=c++11 option. 4.7 Testyourcodelocally DownloadMemoryGame.hpp fromblackboard. DefineMemoryGame.cppandDefineMemoryGameClient.cpp withthefollowingcontents. 1 #include <iostream> 2 #include <string> 3 #include "MemoryGame.hpp" 4 usingnamespace std; 5 6 int main(){ 7 MemoryGamegame; 8 game.~MemoryGame(); 9 10 MemoryGamegame2(3,9); 11 game2.~MemoryGame(); 12 13 stringwords[]={"Hello","Hi","Hey"}; 14 int size= sizeof(words)/ sizeof(words[0]); 15 MemoryGamegame3(words,3,9); 16 game3.~MemoryGame(); 17 18 return0; 19 } 5Herearethecommandstocompilethecodes. NotethatwehavetwoC++sourcecodes:MemoryGame.cpp andMemoryGameClient.cpp. g++-std=c++11-o runMemoryGameClient.cppMemoryGame.cpp ./run Explanation:-std=c++11meanstouseC++11.-orunmeanstooutputarunnablefilecalledrun. Ifweuse-omemory, thentherunnablefileiscalledmemory. Yourcodeshouldrunwithouterrors.Atthisstep, thereisnooutputyet. 4.8 Usemakefile Abetterwaytorunaprojectwithmultiplesourcecodesistousemakefile,createdfortheproject. Inthiscase, if afile ismodified, makecommandonlycompiles themodifiedcodeandrelinktheobjectfile createdbythisfile.Noneedtorecompileandrelinkunchangedfiles. 1 #ThisisanexampleMakefile for MemoryGameproject.This 2 #Typing’make’or ’makerun’willcreatetheexecutablefile. 3 4 #define someMakefilevariables for thecompilerandcompilerflags 5 #touseMakefilevariableslaterin theMakefile: $() 6 # 7 #-g addsdebugginginformationtotheexecutablefile 8 #-Wallturnson most,butnot all,compilerwarnings 9 # 10 #for C++define CC=g++ 11 CC= g++-std=c++11 12 13 #CFLAGS=-g-Wall 14 15 #typing’make’willinvokethefirsttargetentryinthefile 16 #(in this case thedefault targetentry) 17 #youcanname this targetentryanything,but"default"or "all" 18 #arethemost commonlyusednamesbyconvention 19 # 20 all:run 21 22 #Tocreatetheexecutablefilerunweneedtheobjectfiles 23 run: MemoryGameClient.oMemoryGame.o 24 $(CC)-orunMemoryGameClient.oMemoryGame.o 25 26 #TocreatetheobjectfileMemoryGameClient.o, 27 #weneedsource MemoryGameClient.cpp 28 MemoryGameClient.o:MemoryGameClient.cpp 29 $(CC)-cMemoryGameClient.cpp 30 31 #TocreatetheobjectfileMemoryGame.o,needsourcefileMemoryGame.cpp 32 MemoryGame.o:MemoryGame.cpp 33 $(CC)-cMemoryGame.cpp 34 635 clean: 36 $(RM)run*.o *~ Thenrunthefollowingcommands. make ./run4 Task A Implement constructors and destructor. 4.1 Define default constructor 1. Set data member numPairs to be 3. 2. Set data member numSlots to be 8. 3. Allocate dynamic memory for an array of strings with numSlots elements and assign it to member values. Generate three random integers in [0, 999], place the first integer to the first two slots of values, the second integer to the next two slots of values, and the third integer to the subsequent two slots of values. Set the rest elements of values to be empty strings. data data 4. Allocate dynamic memory for an array of booleans– type bool in C++– with numSlots elements and assign it to member bShown. Set each element of bShown to be false. 4.2 Non-default constructor MemoryGame(int numPairs, int numSlots) 1. If at least one of formal parameters numPairs and numSlots is non-positive or numSlots is smaller than twice of numPairs, then set data mem bers numPairs to be 3 and data Otherwise, set formal parameter numSlots. data mem bers numSlots to be 8. member numPairs by formal parameter numPairs, and data member numSlots by 2. Allocate dynamic memory for an array of strings with numSlots elements and assign it to member values. Generate numPairs random integers in [0, 999], place the first integer to the first two slots of values, the second integer to the next two slots of values, ···, until all integers are placed in pairs in values. Set the rest elements of values to be empty strings. data data 3. Allocate dynamic memory for an array of booleans– type bool in C++– with numSlots elements and assign it to member bShown. Set each element of bShown to be false. 4.3 Non-default constructor MemoryGame(string* words, int size, int numSlots) • Assume the number of elements in formal parameter words is size. If formal parameters size or numSlots is non-positive or numSlots is smaller than twice of size, set numSlots to be twice of size. • After the above possible adjustment, set data member numPairs to be formal parameter size, and set member numSlots to be formal parameter numSlots. • Allocate dynamic memory for an array of strings with numSlots elements and assign it to data member values. Place the first word to the first two slots of values, the second word to the next two slots of values, ···, until all words are placed in pairs in values. Set the rest elements of values to be empty strings. data 3data • Allocate dynamic memory for an array of booleans– type bool in C++– with numSlots elements and assign it to member bShown. Set each element of bShown to be false. 4.4 Define destructor Release dynamically allocated memory allocated to data member values. Set values to be nullptr to avoid dangling pointer problem. Do similar things to data member bShown. 4.5 What you need to do Define MemoryGame.cpp. Note that there are some differences in defining methods, aka member functions, in a class and a function that is not associated with a class. • If the header file and source codes are separated as in our case, need to add className followed by :: before a method of class. For example, define default constructor MemoryGame in MemoryGame.cpp, we use the following code snippet. 1 2 Memo ryGame::MemoryGame() { //TODO: Your code goes here. 3 } • A constructor of a class is the creator of an object in that class. It must have exactly the same name as a class, case to case, letter to letter. However, a constructor has no return type, not even void. We can have multiple versions of constructors, as long as their signatures, i.e., parameter lists, are different. These distinctions can be in terms of the number of parameters, the types of parameters, or the order of parameters. • We can imagine a class as a branch concentrating on manufacturing a product, with data members akin to items placed within the lounge of that branch. Constructors and methods within a class can directly access and modify these data members. However, functions outside the class can only access or modify the data members through the public methods provided by that class. As a result, no need to pass data members as parameters or return their values in constructors or methods of the same class. 1 #include "MemoryGame.hpp" 2 3 MemoryGame::MemoryGame() { 4 5 } //TODO: place your code here 6 7 MemoryGame::MemoryGame(int numPairs, int numSlots) { 8 9 } //TODO: place your code here 10 11 MemoryGame::MemoryGame(string* words, int size, int numSlots) { 12 13 } //TODO: place your code here 14 15 MemoryGame::~MemoryGame() { 416 //TODO:placeyourcodehere 17 } 18 19 voidMemoryGame::randomize(){ 20 //TODO:placeholder,donotneedtoimplementinTaskA 21 } 22 23 voidMemoryGame::display() const { 24 //TODO:placeholder,donotneedtoimplementinTaskA 25 } Warning: removeall instancesofsrand(time(NULL));statementbeforesubmittingtogradescope. 4.6 Reducecoderedundancy Youmayfindouttherearealotofredundantcodesintheseconstrctors.OnewayistodefineMemoryGame(int numPairs, intnumSlots), thenuseconstructordelegatortosimplythedefinitionofothertwoconstructors. For example,defaultconstructorcanbedefinedasfollowswiththehelpofnon-defaultconstructorMemoryGame(int, int). 1 MemoryGame::MemoryGame():MemoryGame(3,8){ 2 } Warning: touseconstructordelegate,weneedC++11. Sowhenrunningg++command, add-std=c++11 option. 4.7 Testyourcodelocally DownloadMemoryGame.hpp fromblackboard. DefineMemoryGame.cppandDefineMemoryGameClient.cpp withthefollowingcontents. 1 #include <iostream> 2 #include <string> 3 #include "MemoryGame.hpp" 4 usingnamespace std; 5 6 int main(){ 7 MemoryGamegame; 8 game.~MemoryGame(); 9 10 MemoryGamegame2(3,9); 11 game2.~MemoryGame(); 12 13 stringwords[]={"Hello","Hi","Hey"}; 14 int size= sizeof(words)/ sizeof(words[0]); 15 MemoryGamegame3(words,3,9); 16 game3.~MemoryGame(); 17 18 return0; 19 } 5Herearethecommandstocompilethecodes. NotethatwehavetwoC++sourcecodes:MemoryGame.cpp andMemoryGameClient.cpp. g++-std=c++11-o runMemoryGameClient.cppMemoryGame.cpp ./run Explanation:-std=c++11meanstouseC++11.-orunmeanstooutputarunnablefilecalledrun. Ifweuse-omemory, thentherunnablefileiscalledmemory. Yourcodeshouldrunwithouterrors.Atthisstep, thereisnooutputyet. 4.8 Usemakefile Abetterwaytorunaprojectwithmultiplesourcecodesistousemakefile,createdfortheproject. Inthiscase, if afile ismodified, makecommandonlycompiles themodifiedcodeandrelinktheobjectfile createdbythisfile.Noneedtorecompileandrelinkunchangedfiles. 1 #ThisisanexampleMakefile for MemoryGameproject.This 2 #Typing’make’or ’makerun’willcreatetheexecutablefile. 3 4 #define someMakefilevariables for thecompilerandcompilerflags 5 #touseMakefilevariableslaterin theMakefile: $() 6 # 7 #-g addsdebugginginformationtotheexecutablefile 8 #-Wallturnson most,butnot all,compilerwarnings 9 # 10 #for C++define CC=g++ 11 CC= g++-std=c++11 12 13 #CFLAGS=-g-Wall 14 15 #typing’make’willinvokethefirsttargetentryinthefile 16 #(in this case thedefault targetentry) 17 #youcanname this targetentryanything,but"default"or "all" 18 #arethemost commonlyusednamesbyconvention 19 # 20 all:run 21 22 #Tocreatetheexecutablefilerunweneedtheobjectfiles 23 run: MemoryGameClient.oMemoryGame.o 24 $(CC)-orunMemoryGameClient.oMemoryGame.o 25 26 #TocreatetheobjectfileMemoryGameClient.o, 27 #weneedsource MemoryGameClient.cpp 28 MemoryGameClient.o:MemoryGameClient.cpp 29 $(CC)-cMemoryGameClient.cpp 30 31 #TocreatetheobjectfileMemoryGame.o,needsourcefileMemoryGame.cpp 32 MemoryGame.o:MemoryGame.cpp 33 $(CC)-cMemoryGame.cpp 34 635 clean: 36 $(RM)run*.o *~ Thenrunthefollowingcommands. make ./run